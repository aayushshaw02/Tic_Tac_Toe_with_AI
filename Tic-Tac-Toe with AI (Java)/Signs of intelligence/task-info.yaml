type: edu
files:
  - name: src/tictactoe/Main.java
    visible: true
    text: |
      package tictactoe;
      
      public class Main {
          public static void main(String[] args) {
              // write your code here
          }
      }
    learner_created: false
  - name: test/TicTacToeTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.util.List;
      
      
      public class TicTacToeTest extends StageTest<String> {
      
          int[] easyAiMoves = new int[9];
      
          @DynamicTest(order = 0)
          CheckResult testBadParameters() {
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              String output = program.execute("start");
              if (!output.toLowerCase().contains("bad parameters")) {
                  return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
              }
      
              output = program.execute("start easy");
              if (!output.toLowerCase().contains("bad parameters")) {
                  return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
              }
      
              program.execute("exit");
      
              if (!program.isFinished()) {
                  return CheckResult.wrong("After entering 'exit' command you should stop the program!");
              }
      
              return CheckResult.correct();
          }
      
      
          @DynamicTest(order = 1)
          CheckResult testGridOutput() {
      
              TestedProgram program = new TestedProgram();
      
              program.start();
      
              String output = program.execute("start user easy");
      
              Grid printedGrid = Grid.fromOutput(output);
              Grid emptyGrid = Grid.fromLine("_________");
      
              if (!printedGrid.equals(emptyGrid)) {
                  return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                      "Correct empty grid:\n" + emptyGrid);
              }
      
              if (!output.toLowerCase().contains("enter the coordinates:")) {
                  return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
              }
      
              output = program.execute("2 2");
      
              Grid gridAfterMove = Grid.fromOutput(output);
              Grid correctGridAfterMove = Grid.fromLine("____X____");
      
              if (!gridAfterMove.equals(correctGridAfterMove)) {
                  return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                      "Your grid:\n" + gridAfterMove + "\n" +
                      "Correct grid:\n" + correctGridAfterMove);
              }
      
              if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                  return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
              }
      
              Grid gridAfterAiMove = Grid.fromOutput(output, 2);
      
              if (gridAfterAiMove.equals(gridAfterMove)) {
                  return CheckResult.wrong("After AI move grid wasn't changed!");
              }
      
              Grid gameGrid = gridAfterAiMove;
      
              while (true) {
                  if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                      switch (gameGrid.getGameState()) {
                          case X_WIN:
                              if (!output.contains("X wins")) {
                                  return CheckResult.wrong("You should print 'X wins' if X win the game");
                              }
                              break;
                          case O_WIN:
                              if (!output.contains("O wins")) {
                                  return CheckResult.wrong("You should print 'O wins' if O win the game");
                              }
                              break;
                          case DRAW:
                              if (!output.contains("Draw")) {
                                  return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                              }
                              break;
                      }
                      break;
                  }
                  Position nextMove = Minimax.getMove(gameGrid, CellState.X);
      
                  Grid tempGrid = gameGrid.copy();
                  tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);
      
                  output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
      
                  gameGrid = Grid.fromOutput(output);
      
                  if (!gameGrid.equals(tempGrid)) {
                      return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                          "Your gird\n" + gameGrid + "\n" +
                          "Correct grid\n" + tempGrid);
                  }
      
                  if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                      continue;
      
                  gameGrid = Grid.fromOutput(output, 2);
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(repeat = 100, order = 2)
          CheckResult checkEasyAi() {
              TestedProgram program = new TestedProgram();
              program.start();
      
              program.execute("start user easy");
      
              String output = program.execute("2 2");
      
              Grid gridAfterAiMove = Grid.fromOutput(output, 2);
      
              CellState[][] array = gridAfterAiMove.getGrid();
      
              for (int i = 0; i < 9; i++) {
                  if (i == 4) {
                      continue;
                  }
                  if (array[i / 3][i % 3] == CellState.O) {
                      easyAiMoves[i]++;
                  }
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 3)
          CheckResult checkRandom() {
              double averageScore = 0;
      
              for (int i = 0; i < easyAiMoves.length; i++) {
                  averageScore += (i + 1) * easyAiMoves[i];
              }
      
              averageScore /= 8;
      
              double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;
      
              if (Math.abs(averageScore - expectedValue) > 20) {
                  return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
              }
      
              return CheckResult.correct();
          }
      
          boolean isEasyNotMovingLikeMedium = false;
      
          @DynamicTest(repeat = 30, order = 4)
          CheckResult checkEasyNotMovingLikeMedium() {
      
              if (isEasyNotMovingLikeMedium) {
                  return CheckResult.correct();
              }
      
              TestedProgram program = new TestedProgram();
              program.start();
              program.execute("start user easy");
      
              String output = program.execute("2 2");
      
              Grid gameGrid = Grid.fromOutput(output, 2);
      
              CellState[][] cellStates = gameGrid.getGrid();
      
              if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                  output = program.execute("1 1");
                  gameGrid = Grid.fromOutput(output, 2);
                  if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                      isEasyNotMovingLikeMedium = true;
                  }
              } else {
                  output = program.execute("1 3");
                  gameGrid = Grid.fromOutput(output, 2);
                  if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                      isEasyNotMovingLikeMedium = true;
                  }
              }
      
              program.stop();
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 5)
          CheckResult checkEasyNotMovingLikeMediumAfter() {
              if (!isEasyNotMovingLikeMedium) {
                  return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
              }
              return CheckResult.correct();
          }
      
      
          @DynamicTest(order = 6)
          CheckResult checkEasyVsEasy() {
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              String output = program.execute("start easy easy");
      
              List<Grid> gridList = Grid.allGridsFromOutput(output);
      
              Grid.checkGridSequence(gridList);
      
              return CheckResult.correct();
          }
      
          @DynamicTest(repeat = 10, order = 7)
          CheckResult checkMediumAi() {
              TestedProgram program = new TestedProgram();
              program.start();
              program.execute("start user medium");
      
              String output = program.execute("2 2");
      
              Grid gameGrid = Grid.fromOutput(output, 2);
      
              CellState[][] cellStates = gameGrid.getGrid();
      
              if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                  output = program.execute("1 1");
                  gameGrid = Grid.fromOutput(output, 2);
                  if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                      return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                  }
              } else {
                  output = program.execute("1 3");
                  gameGrid = Grid.fromOutput(output, 2);
                  if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                      return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                  }
              }
              program.stop();
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 8, repeat = 5)
          CheckResult checkMediumVsMedium() {
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              String output = program.execute("start medium medium");
      
              List<Grid> gridList = Grid.allGridsFromOutput(output);
      
              Grid.checkGridSequence(gridList);
      
              return CheckResult.correct();
          }
      
          boolean isMediumNotMovingLikeHard = false;
      
          @DynamicTest(repeat = 30, order = 9)
          CheckResult checkMediumNotMovingLikeHard() {
      
              if (isMediumNotMovingLikeHard) {
                  return CheckResult.correct();
              }
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              program.execute("start user medium");
      
              String output = program.execute("2 2");
      
              Grid userMoveGrid = Grid.fromOutput(output, 1);
              Grid mediumMoveGrid = Grid.fromOutput(output, 2);
      
              Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);
      
              List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);
      
              if (!minimaxCorrectPositions.contains(mediumMove)) {
                  isMediumNotMovingLikeHard = true;
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 10)
          CheckResult checkMediumNotMovingLikeHardAfter() {
              if (!isMediumNotMovingLikeHard) {
                  return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
              }
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/tictactoe/Result.java
    visible: true
    text: |
      package tictactoe;
      
      import static java.lang.constant.ConstantDescs.NULL;
      
      public enum Result {
          X_WINS('X'),
          O_WINS('O'),
          DRAW('D'),
          NOT_OVER('N');
          char state;
          Result(char state){
              this.state=state;
          }
          public static Result findByState(char state){
              for(Result it: Result.values()){
                  //System.out.println(state+" "+ it.state);
                  if(state==it.state){
                      return it;
                  }
              }
              return null;
          }
      }
    learner_created: true
  - name: src/tictactoe/Tic_Tac_Toe.java
    visible: true
    text: |
      package tictactoe;
      import java.util.*;
      
      import static java.lang.System.exit;
      
      public class Tic_Tac_Toe {
          private char[][] table;
          private int filledCells=0,filledX=0,filledO=0;
          Result r;
          public int getFilledX(){
              return filledX;
          }
          public int getFilledO(){
              return filledO;
          }
          public void increaseFilledX(int x){
              filledX+=x;
          }
          public void increaseFilledO(int x){
              filledO+=x;
          }
          public void setValidCell(int r,int c,char x){
              table[r][c]=x;
              if(x==' ') return;
              increaseFilledCells(1);
              if(x=='X')
                  increaseFilledX(1);
              else if(x=='O')
                  increaseFilledO(1);
              result();
          }
          public void printTable(){
              System.out.println("---------");
              for(int i=0;i<3;i++){
                  for(int j=0;j<5;j++){
                      if(j==0||j==4){
                          System.out.print("| ");
                      }
                      else{
                          System.out.print(table[i][j-1]+" ");
                      }
                  }
                  System.out.println();
              }
              System.out.println("---------");
          }
          Tic_Tac_Toe(){
              table= new char[][]{{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};
              r=Result.NOT_OVER;
          }
          public int getFilledCells(){
              return this.filledCells;
          }
          public void result(){
              int i,j;
              for(i=0;i<3;i++){
                  if(table[i][0]!=' ') {
                      for (j = 1; j < 3; j++) {
                          if (this.table[i][j] != this.table[i][0])
                              break;
                      }
                      if (j == 3) {
                          r=Result.findByState(table[i][0]);
                          return;
                      }
                  }
                  if(table[0][i]!=' ') {
                      for (j = 1; j < 3; j++) {
                          if (table[j][i] != table[0][i])
                              break;
                      }
                      if (j == 3) {
                          r=Result.findByState(table[0][i]);
                          return;
                      }
                  }
              }
              if(table[0][0]!=' ') {
                  if (table[1][1] == table[0][0] && table[2][2] == table[0][0]) {
                      try {
                          r = Result.findByState(table[0][0]);
                          return;
                      } catch(NullPointerException e){
                          System.out.println("Error");
                          return;
                      }
                  }
              }
              if(table[0][2]!=' ') {
                  if (table[1][1] == table[0][2] && table[2][0] == table[0][2]) {
                      r=Result.findByState(table[0][2]);
                      return;
                  }
              }
              if(getFilledCells()==9){
                  r=Result.findByState('D');
              }
              else{
                  r=Result.findByState('N');
              }
              //System.out.println(r.name());
              //printResult(r);
          }
          public void printResult(Result r){
              try {
                  switch (r) {
                      case X_WINS:
                          System.out.println("X wins");
                          break;
                      case O_WINS:
                          System.out.println("O wins");
                          break;
                      case DRAW:
                          System.out.println("Draw");
                          break;
                      case NOT_OVER:
                          System.out.println("Game not finished");
                          break;
                  }
              } catch(NullPointerException e){
                  System.out.println("Error!");
              }
          }
          public void playUser(char ch){
              int r=0,c=0;
              Scanner sc=new Scanner(System.in);
              while (true) {
                  try {
                      System.out.println("Enter the coordinates: ");
                      r = sc.nextInt();
                      c = sc.nextInt();
      
                  } catch (Exception e) {
                      System.out.println("You should enter numbers!");
                      sc.nextLine();
                  }
                  if (r < 1 || r > 3 || c < 1 || c > 3) {
                      System.out.println("Coordinates should be from 1 to 3!");
                      continue;
                  }
                  if (table[r - 1][c - 1] != ' ') {
                      System.out.println("This cell is occupied! Choose another one!");
                      continue;
                  }
                  setValidCell(r-1,c-1,ch);
                  break;
              }
          }
          public void playEasy(char ch){
              int r=0,c=0;
              Scanner sc=new Scanner(System.in);
              Random rr=new Random();
              Random rc=new Random();
              while(true) {
                  r = rr.nextInt(3);
                  c = rc.nextInt(3);
                  if(table[r][c]==' ') {
                      System.out.println("Making move level \"easy\"");
                      setValidCell(r,c,ch);
                      break;
                  }
              }
          }
          public void playLevel(String player,char ch){
              switch(player){
                  case "easy": playEasy(ch);
                               break;
                  case "user": playUser(ch);
                               break;
                  default: System.out.println("Bad parameters!");
                           break;
              }
          }
          public void playGame(String player1,String player2){
              printTable();
              while(r==Result.NOT_OVER){
                  if(getFilledX()<=getFilledO()) {
                     playLevel(player1,'X');
                  }
                  else {
                     playLevel(player2,'O');
                  }
                      //printResult(this.r);
                      printTable();
                  }
                printResult(r);
              }
          public void setTable(){
              Scanner sc=new Scanner(System.in);
              String s;
              while(true){
                  System.out.print("Enter the cells: ");
                  s=sc.nextLine();
                  boolean valid=true;
                  for(char ch: s.toCharArray()){
                      if(ch!='X'&&ch!='O'&&ch!='_'){
                          valid=false;
                          break;
                      }
                  }
                  if(!valid)
                      continue;
                  break;
              }
              for(int i=0;i<s.length();i++){
                  char temp=s.charAt(i);
                  if(temp=='_'){
                      temp=' ';
                  }
                  setValidCell(i/3,i%3,temp);
              }
              printTable();
          }
          public void increaseFilledCells(int x){
              this.filledCells+=x;
          }
          public void menu(){
              Scanner sc=new Scanner(System.in);
              String com="",player1="",player2="";
              String[] level=new String[]{"easy","user"};
              while(true) {
                  System.out.print("Input commands: ");
                  String temp = sc.nextLine();
                  String[] arr = temp.split("\s+");
                  com = arr[0];
                  switch (com) {
                      case "exit": exit(0);
                      case "start":
                          try {
                              player1 = arr[1];
                              player2 = arr[2];
                          }catch (Exception e){
                              System.out.println("Bad parameters!");
                              break;
                          }
                          if(!Arrays.asList(level)
                              .contains(player1)){
                              System.out.println("Bad parameters!");
                              break;
                          }
                          if(!Arrays.asList(level)
                                  .contains(player2)){
                              System.out.println("Bad parameters!");
                              break;
                          }
                          playGame(player1, player2);
                      default:
                          System.out.println("Bad parameters!");
                          break;
                  }
              }
      
          }
          public void setCell(){
              int r=0,c=0;
              Scanner sc=new Scanner(System.in);
              while(true){
                  try {
                      System.out.println("Enter the coordinates: ");
                      r=sc.nextInt();
                      c=sc.nextInt();
      
                  } catch(Exception e){
                      System.out.println("You should enter numbers!");
                      sc.nextLine();
                  }
                  if(r<1||r>3||c<1||c>3){
                     System.out.println ("Coordinates should be from 1 to 3!");
                     continue;
                  }
                  if(table[r-1][c-1]!=' '){
                      System.out.println ("This cell is occupied! Choose another one!");
                      continue;
                  }
                  if(getFilledX()<=getFilledO()){
                      setValidCell(r-1,c-1,'X');
                  }
                  else{
      
                      setValidCell(r-1,c-1,'O');
                  }
                  printTable();
                  break;
              }
      
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/7437#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 05 Feb 2024 05:16:18 UTC"
record: 4
