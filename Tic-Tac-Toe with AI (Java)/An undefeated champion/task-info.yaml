type: edu
files:
  - name: src/tictactoe/Main.java
    visible: true
    text: |
      package tictactoe;
      
      public class Main {
          public static void main(String[] args) {
              // write your code here
          }
      }
    learner_created: false
  - name: test/TicTacToeTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.util.List;
      
      
      public class TicTacToeTest extends StageTest<String> {
      
          int[] easyAiMoves = new int[9];
      
          @DynamicTest(order = 0)
          CheckResult testBadParameters() {
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              String output = program.execute("start");
              if (!output.toLowerCase().contains("bad parameters")) {
                  return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
              }
      
              output = program.execute("start easy");
              if (!output.toLowerCase().contains("bad parameters")) {
                  return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
              }
      
              program.execute("exit");
      
              if (!program.isFinished()) {
                  return CheckResult.wrong("After entering 'exit' command you should stop the program!");
              }
      
              return CheckResult.correct();
          }
      
      
          @DynamicTest(order = 1)
          CheckResult testGridOutput() {
      
              TestedProgram program = new TestedProgram();
      
              program.start();
      
              String output = program.execute("start user easy");
      
              Grid printedGrid = Grid.fromOutput(output);
              Grid emptyGrid = Grid.fromLine("_________");
      
              if (!printedGrid.equals(emptyGrid)) {
                  return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                      "Correct empty grid:\n" + emptyGrid);
              }
      
              if (!output.toLowerCase().contains("enter the coordinates:")) {
                  return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
              }
      
              output = program.execute("2 2");
      
              Grid gridAfterMove = Grid.fromOutput(output);
              Grid correctGridAfterMove = Grid.fromLine("____X____");
      
              if (!gridAfterMove.equals(correctGridAfterMove)) {
                  return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                      "Your grid:\n" + gridAfterMove + "\n" +
                      "Correct grid:\n" + correctGridAfterMove);
              }
      
              if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                  return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
              }
      
              Grid gridAfterAiMove = Grid.fromOutput(output, 2);
      
              if (gridAfterAiMove.equals(gridAfterMove)) {
                  return CheckResult.wrong("After AI move grid wasn't changed!");
              }
      
              Grid gameGrid = gridAfterAiMove;
      
              while (true) {
                  if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                      switch (gameGrid.getGameState()) {
                          case X_WIN:
                              if (!output.contains("X wins")) {
                                  return CheckResult.wrong("You should print 'X wins' if X win the game");
                              }
                              break;
                          case O_WIN:
                              if (!output.contains("O wins")) {
                                  return CheckResult.wrong("You should print 'O wins' if O win the game");
                              }
                              break;
                          case DRAW:
                              if (!output.contains("Draw")) {
                                  return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                              }
                              break;
                      }
                      break;
                  }
                  Position nextMove = Minimax.getMove(gameGrid, CellState.X);
      
                  Grid tempGrid = gameGrid.copy();
                  tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);
      
                  output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
      
                  gameGrid = Grid.fromOutput(output);
      
                  if (!gameGrid.equals(tempGrid)) {
                      return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                          "Your gird\n" + gameGrid + "\n" +
                          "Correct grid\n" + tempGrid);
                  }
      
                  if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                      continue;
      
                  gameGrid = Grid.fromOutput(output, 2);
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(repeat = 100, order = 2)
          CheckResult checkEasyAi() {
              TestedProgram program = new TestedProgram();
              program.start();
      
              program.execute("start user easy");
      
              String output = program.execute("2 2");
      
              Grid gridAfterAiMove = Grid.fromOutput(output, 2);
      
              CellState[][] array = gridAfterAiMove.getGrid();
      
              for (int i = 0; i < 9; i++) {
                  if (i == 4) {
                      continue;
                  }
                  if (array[i / 3][i % 3] == CellState.O) {
                      easyAiMoves[i]++;
                  }
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 3)
          CheckResult checkRandom() {
              double averageScore = 0;
      
              for (int i = 0; i < easyAiMoves.length; i++) {
                  averageScore += (i + 1) * easyAiMoves[i];
              }
      
              averageScore /= 8;
      
              double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;
      
              if (Math.abs(averageScore - expectedValue) > 20) {
                  return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
              }
      
              return CheckResult.correct();
          }
      
          boolean isEasyNotMovingLikeMedium = false;
      
          @DynamicTest(repeat = 30, order = 4)
          CheckResult checkEasyNotMovingLikeMedium() {
      
              if (isEasyNotMovingLikeMedium) {
                  return CheckResult.correct();
              }
      
              TestedProgram program = new TestedProgram();
              program.start();
              program.execute("start user easy");
      
              String output = program.execute("2 2");
      
              Grid gameGrid = Grid.fromOutput(output, 2);
      
              CellState[][] cellStates = gameGrid.getGrid();
      
              if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                  output = program.execute("1 1");
                  gameGrid = Grid.fromOutput(output, 2);
                  if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                      isEasyNotMovingLikeMedium = true;
                  }
              } else {
                  output = program.execute("1 3");
                  gameGrid = Grid.fromOutput(output, 2);
                  if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                      isEasyNotMovingLikeMedium = true;
                  }
              }
      
              program.stop();
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 5)
          CheckResult checkEasyNotMovingLikeMediumAfter() {
              if (!isEasyNotMovingLikeMedium) {
                  return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
              }
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 6)
          CheckResult checkEasyVsEasy() {
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              String output = program.execute("start easy easy");
      
              List<Grid> gridList = Grid.allGridsFromOutput(output);
      
              Grid.checkGridSequence(gridList);
      
              return CheckResult.correct();
          }
      
          @DynamicTest(repeat = 10, order = 7)
          CheckResult checkMediumAi() {
              TestedProgram program = new TestedProgram();
              program.start();
              program.execute("start user medium");
      
              String output = program.execute("2 2");
      
              Grid gameGrid = Grid.fromOutput(output, 2);
      
              CellState[][] cellStates = gameGrid.getGrid();
      
              if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                  output = program.execute("1 1");
                  gameGrid = Grid.fromOutput(output, 2);
                  if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                      return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                  }
              } else {
                  output = program.execute("1 3");
                  gameGrid = Grid.fromOutput(output, 2);
                  if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                      return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                  }
              }
              program.stop();
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 8, repeat = 5)
          CheckResult checkMediumVsMedium() {
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              String output = program.execute("start medium medium");
      
              List<Grid> gridList = Grid.allGridsFromOutput(output);
      
              Grid.checkGridSequence(gridList);
      
              return CheckResult.correct();
          }
      
          boolean isMediumNotMovingLikeHard = false;
      
          @DynamicTest(repeat = 30, order = 9)
          CheckResult checkMediumNotMovingLikeHard() {
      
              if (isMediumNotMovingLikeHard) {
                  return CheckResult.correct();
              }
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              program.execute("start user medium");
      
              String output = program.execute("2 2");
      
              Grid userMoveGrid = Grid.fromOutput(output, 1);
              Grid mediumMoveGrid = Grid.fromOutput(output, 2);
      
              Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);
      
              List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);
      
              if (!minimaxCorrectPositions.contains(mediumMove)) {
                  isMediumNotMovingLikeHard = true;
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 10)
          CheckResult checkMediumNotMovingLikeHardAfter() {
              if (!isMediumNotMovingLikeHard) {
                  return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
              }
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 11)
          CheckResult checkHardAi() {
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              String output = program.execute("start user hard");
              Grid grid = Grid.fromOutput(output);
              Position nextMove = Minimax.getMove(grid, CellState.X);
              output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
      
              while (!output.toLowerCase().contains("win") && !output.toLowerCase().contains("draw")) {
                  Grid gridAfterUserMove = Grid.fromOutput(output);
                  Grid gridAfterAiMove = Grid.fromOutput(output, 2);
                  Position aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);
      
                  List<Position> correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove, CellState.O);
                  if (!correctMinimaxMovePositions.contains(aiMove)) {
                      return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!");
                  }
      
                  nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);
      
                  output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(repeat = 5, order = 12)
          CheckResult checkHardVsHard() {
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              String output = program.execute("start hard hard");
      
              if (!output.toLowerCase().contains("draw")) {
                  return CheckResult.wrong("The result of the game between minimax algorithms should be always 'Draw'!\n" +
                      "Make sure your output contains 'Draw'.");
              }
      
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/tictactoe/Result.java
    visible: true
    text: |
      package tictactoe;
      
      import static java.lang.constant.ConstantDescs.NULL;
      
      public enum Result {
          X_WINS('X'),
          O_WINS('O'),
          DRAW('D'),
          NOT_OVER('N');
          char state;
          Result(char state){
              this.state=state;
          }
          public static Result findByState(char state){
              for(Result it: Result.values()){
                  //System.out.println(state+" "+ it.state);
                  if(state==it.state){
                      return it;
                  }
              }
              return null;
          }
      }
    learner_created: true
  - name: src/tictactoe/Tic_Tac_Toe.java
    visible: true
    text: "package tictactoe;\nimport java.util.*;\n\nimport static java.lang.System.exit;\n\
    \npublic class Tic_Tac_Toe {\n    private char[][] table;\n    private int filledCells=0,filledX=0,filledO=0;\n\
    \    Result r;\n    public int getFilledX(){\n        return filledX;\n    }\n\
    \    public int getFilledO(){\n        return filledO;\n    }\n    public void\
    \ increaseFilledX(int x){\n        filledX+=x;\n    }\n    public void increaseFilledO(int\
    \ x){\n        filledO+=x;\n    }\n    public void setValidCell(int r,int c,char\
    \ x){\n        table[r][c]=x;\n        if(x==' ') return;\n        increaseFilledCells(1);\n\
    \        if(x=='X')\n            increaseFilledX(1);\n        else if(x=='O')\n\
    \            increaseFilledO(1);\n        result();\n    }\n    public void printTable(){\n\
    \        System.out.println(\"---------\");\n        for(int i=0;i<3;i++){\n \
    \           for(int j=0;j<5;j++){\n                if(j==0||j==4){\n         \
    \           System.out.print(\"| \");\n                }\n                else{\n\
    \                    System.out.print(table[i][j-1]+\" \");\n                }\n\
    \            }\n            System.out.println();\n        }\n        System.out.println(\"\
    ---------\");\n    }\n    Tic_Tac_Toe(){\n        table= new char[][]{{' ', '\
    \ ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};\n        r=Result.NOT_OVER;\n  \
    \  }\n    public int getFilledCells(){\n        return this.filledCells;\n   \
    \ }\n    public void result(){\n        int i,j;\n        for(i=0;i<3;i++){\n\
    \            if(table[i][0]!=' ') {\n                for (j = 1; j < 3; j++) {\n\
    \                    if (this.table[i][j] != this.table[i][0])\n             \
    \           break;\n                }\n                if (j == 3) {\n       \
    \             r=Result.findByState(table[i][0]);\n                    return;\n\
    \                }\n            }\n            if(table[0][i]!=' ') {\n      \
    \          for (j = 1; j < 3; j++) {\n                    if (table[j][i] != table[0][i])\n\
    \                        break;\n                }\n                if (j == 3)\
    \ {\n                    r=Result.findByState(table[0][i]);\n                \
    \    return;\n                }\n            }\n        }\n        if(table[0][0]!='\
    \ ') {\n            if (table[1][1] == table[0][0] && table[2][2] == table[0][0])\
    \ {\n                try {\n                    r = Result.findByState(table[0][0]);\n\
    \                    return;\n                } catch(NullPointerException e){\n\
    \                    System.out.println(\"Error\");\n                    return;\n\
    \                }\n            }\n        }\n        if(table[0][2]!=' ') {\n\
    \            if (table[1][1] == table[0][2] && table[2][0] == table[0][2]) {\n\
    \                r=Result.findByState(table[0][2]);\n                return;\n\
    \            }\n        }\n        if(getFilledCells()==9){\n            r=Result.findByState('D');\n\
    \        }\n        else{\n            r=Result.findByState('N');\n        }\n\
    \        //System.out.println(r.name());\n        //printResult(r);\n    }\n \
    \   public void printResult(Result r){\n        try {\n            switch (r)\
    \ {\n                case X_WINS:\n                    System.out.println(\"X\
    \ wins\");\n                    break;\n                case O_WINS:\n       \
    \             System.out.println(\"O wins\");\n                    break;\n  \
    \              case DRAW:\n                    System.out.println(\"Draw\");\n\
    \                    break;\n                case NOT_OVER:\n                \
    \    System.out.println(\"Game not finished\");\n                    break;\n\
    \            }\n        } catch(NullPointerException e){\n            System.out.println(\"\
    Error!\");\n        }\n    }\n    public void playUser(char ch){\n        int\
    \ r=0,c=0;\n        Scanner sc=new Scanner(System.in);\n        while (true) {\n\
    \            try {\n                System.out.println(\"Enter the coordinates:\
    \ \");\n                r = sc.nextInt();\n                c = sc.nextInt();\n\
    \n            } catch (Exception e) {\n                System.out.println(\"You\
    \ should enter numbers!\");\n                sc.nextLine();\n            }\n \
    \           if (r < 1 || r > 3 || c < 1 || c > 3) {\n                System.out.println(\"\
    Coordinates should be from 1 to 3!\");\n                continue;\n          \
    \  }\n            if (table[r - 1][c - 1] != ' ') {\n                System.out.println(\"\
    This cell is occupied! Choose another one!\");\n                continue;\n  \
    \          }\n            setValidCell(r-1,c-1,ch);\n            break;\n    \
    \    }\n    }\n    public void playEasy(char ch){\n        int r=0,c=0;\n    \
    \    Scanner sc=new Scanner(System.in);\n        Random rr=new Random();\n   \
    \     Random rc=new Random();\n        while(true) {\n            r = rr.nextInt(3);\n\
    \            c = rc.nextInt(3);\n            if(table[r][c]==' ') {\n        \
    \        System.out.println(\"Making move level \\\"easy\\\"\");\n           \
    \     setValidCell(r,c,ch);\n                break;\n            }\n        }\n\
    \    }\n    public void playMedium(char ch){\n        int r=0,c=0;\n        Scanner\
    \ sc=new Scanner(System.in);\n        Random rr=new Random();\n        Random\
    \ rc=new Random();\n        System.out.println(\"Making move level \\\"medium\\\
    \"\");\n        int chcount=0;\n        for(int i=0;i<3;i++){\n            chcount=0;\n\
    \            for(int j=0;j<3;j++){\n                if(table[i][j]==' '){\n  \
    \                  r=i;\n                    c=j;\n                }\n       \
    \         if(table[i][j]==ch){\n                    chcount++;\n             \
    \   }\n            }\n            if(chcount==2&&table[r][c]==' '){\n        \
    \        setValidCell(r,c,ch);\n                return;\n            }\n     \
    \   }\n        for(int i=0;i<3;i++){\n            chcount=0;\n            for(int\
    \ j=0;j<3;j++){\n                if(table[j][i]==' '){\n                    r=j;\n\
    \                    c=i;\n                }\n                if(table[j][i]==ch){\n\
    \                    chcount++;\n                }\n            }\n          \
    \  if(chcount==2&&table[r][c]==' '){\n                setValidCell(r,c,ch);\n\
    \                return;\n            }\n        }\n        chcount=0;\n     \
    \   for(int i=0;i<3;i++){\n            if(table[i][i]==' '){\n               \
    \ r=i;\n                c=i;\n            }\n            if(table[i][i]==ch){\n\
    \                chcount++;\n            }\n        }\n        if(chcount==2&&table[r][c]=='\
    \ '){\n            setValidCell(r,c,ch);\n            return;\n        }\n   \
    \     chcount=0;\n        for(int i=0;i<3;i++){\n            if(table[i][2-i]=='\
    \ '){\n                r=i;\n                c=2-i;\n            }\n         \
    \   if(table[i][2-i]==ch){\n                chcount++;\n            }\n      \
    \  }\n        if(chcount==2&&table[r][c]==' '){\n            setValidCell(r,c,ch);\n\
    \            return;\n        }\n        for(int i=0;i<3;i++){\n            chcount=0;\n\
    \            for(int j=0;j<3;j++){\n                if(table[i][j]==' '){\n  \
    \                  r=i;\n                    c=j;\n                }\n       \
    \         if(table[i][j]!=ch&&table[i][j]!=' '){\n                    chcount++;\n\
    \                }\n            }\n            if(chcount==2&&table[r][c]==' '){\n\
    \                setValidCell(r,c,ch);\n                return;\n            }\n\
    \        }\n        for(int i=0;i<3;i++){\n            chcount=0;\n          \
    \  for(int j=0;j<3;j++){\n                if(table[j][i]==' '){\n            \
    \        r=j;\n                    c=i;\n                }\n                if(table[j][i]!=ch&&table[j][i]!='\
    \ '){\n                    chcount++;\n                }\n            }\n    \
    \        if(chcount==2&&table[r][c]==' '){\n                setValidCell(r,c,ch);\n\
    \                return;\n            }\n        }\n        chcount=0;\n     \
    \   for(int i=0;i<3;i++){\n            if(table[i][i]==' '){\n               \
    \ r=i;\n                c=i;\n            }\n            if(table[i][i]!=ch&&table[i][i]!='\
    \ '){\n                chcount++;\n            }\n        }\n        if(chcount==2&&table[r][c]=='\
    \ '){\n            setValidCell(r,c,ch);\n            return;\n        }\n   \
    \     chcount=0;\n        for(int i=0;i<3;i++){\n            if(table[i][2-i]=='\
    \ '){\n                r=i;\n                c=2-i;\n            }\n         \
    \   if(table[i][2-i]!=ch&&table[i][2-i]!=' '){\n                chcount++;\n \
    \           }\n        }\n        if(chcount==2&&table[r][c]==' '){\n        \
    \    setValidCell(r,c,ch);\n            return;\n        }\n        while(true)\
    \ {\n            r = rr.nextInt(3);\n            c = rc.nextInt(3);\n        \
    \    if(table[r][c]==' ') {\n                setValidCell(r,c,ch);\n         \
    \       return;\n            }\n        }\n    }\n    public void playLevel(String\
    \ player,char ch){\n        switch(player){\n            case \"easy\": playEasy(ch);\n\
    \                         break;\n            case \"user\": playUser(ch);\n \
    \                        break;\n            case \"medium\": playMedium(ch);\
    \  \n                           break;\n            default: System.out.println(\"\
    Bad parameters!\");\n                     break;\n        }\n    }\n    public\
    \ void playGame(String player1,String player2){\n        printTable();\n     \
    \   while(r==Result.NOT_OVER){\n            if(getFilledX()<=getFilledO()) {\n\
    \               playLevel(player1,'X');\n            }\n            else {\n \
    \              playLevel(player2,'O');\n            }\n                //printResult(this.r);\n\
    \                printTable();\n            }\n          printResult(r);\n   \
    \     }\n    public void setTable(){\n        Scanner sc=new Scanner(System.in);\n\
    \        String s;\n        while(true){\n            System.out.print(\"Enter\
    \ the cells: \");\n            s=sc.nextLine();\n            boolean valid=true;\n\
    \            for(char ch: s.toCharArray()){\n                if(ch!='X'&&ch!='O'&&ch!='_'){\n\
    \                    valid=false;\n                    break;\n              \
    \  }\n            }\n            if(!valid)\n                continue;\n     \
    \       break;\n        }\n        for(int i=0;i<s.length();i++){\n          \
    \  char temp=s.charAt(i);\n            if(temp=='_'){\n                temp='\
    \ ';\n            }\n            setValidCell(i/3,i%3,temp);\n        }\n    \
    \    printTable();\n    }\n    public void increaseFilledCells(int x){\n     \
    \   this.filledCells+=x;\n    }\n    public void menu(){\n        Scanner sc=new\
    \ Scanner(System.in);\n        String com=\"\",player1=\"\",player2=\"\";\n  \
    \      String[] level=new String[]{\"easy\",\"user\",\"medium\"};\n        while(true)\
    \ {\n            System.out.print(\"Input commands: \");\n            String temp\
    \ = sc.nextLine();\n            String[] arr = temp.split(\"\\s+\");\n       \
    \     com = arr[0];\n            switch (com) {\n                case \"exit\"\
    : exit(0);\n                case \"start\":\n                    try {\n     \
    \                   player1 = arr[1];\n                        player2 = arr[2];\n\
    \                    }catch (Exception e){\n                        System.out.println(\"\
    Bad parameters!\");\n                        break;\n                    }\n \
    \                   if(!Arrays.asList(level)\n                        .contains(player1)){\n\
    \                        System.out.println(\"Bad parameters!\");\n          \
    \              break;\n                    }\n                    if(!Arrays.asList(level)\n\
    \                            .contains(player2)){\n                        System.out.println(\"\
    Bad parameters!\");\n                        break;\n                    }\n \
    \                   playGame(player1, player2);\n                default:\n  \
    \                  System.out.println(\"Bad parameters!\");\n                \
    \    break;\n            }\n        }\n\n    }\n    public void setCell(){\n \
    \       int r=0,c=0;\n        Scanner sc=new Scanner(System.in);\n        while(true){\n\
    \            try {\n                System.out.println(\"Enter the coordinates:\
    \ \");\n                r=sc.nextInt();\n                c=sc.nextInt();\n\n \
    \           } catch(Exception e){\n                System.out.println(\"You should\
    \ enter numbers!\");\n                sc.nextLine();\n            }\n        \
    \    if(r<1||r>3||c<1||c>3){\n               System.out.println (\"Coordinates\
    \ should be from 1 to 3!\");\n               continue;\n            }\n      \
    \      if(table[r-1][c-1]!=' '){\n                System.out.println (\"This cell\
    \ is occupied! Choose another one!\");\n                continue;\n          \
    \  }\n            if(getFilledX()<=getFilledO()){\n                setValidCell(r-1,c-1,'X');\n\
    \            }\n            else{\n\n                setValidCell(r-1,c-1,'O');\n\
    \            }\n            printTable();\n            break;\n        }\n\n \
    \   }\n}\n"
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/7438#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 05 Feb 2024 05:48:58 UTC"
record: 5
